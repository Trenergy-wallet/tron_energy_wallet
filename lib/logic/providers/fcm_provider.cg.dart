import 'dart:async';

import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:trenergy_wallet/core/utils.dart';
import 'package:trenergy_wallet/data/dto/remote_message/remote_message.dart';
import 'package:trenergy_wallet/logic/providers/inapp_logger.dart';
import 'package:trenergy_wallet/logic/providers/push_messages_provider.cg.dart';
import 'package:trenergy_wallet/logic/providers/push_notifications_provider.cg.dart';
import 'package:trenergy_wallet/logic/repo/account/account_provider.cg.dart';
import 'package:trenergy_wallet/logic/repo/repo.cg.dart';
import 'package:trenergy_wallet/logic/repo/transactions/transactions_provider.cg.dart';
import 'package:trenergy_wallet/logic/repo/tron_energy_pipe/tron_energy_pipe_provider.cg.dart';
// ignore_for_file: unnecessary_statements

part 'gen/fcm_provider.cg.g.dart';

/// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è Firebase CloudMessaging
///
/// –ù–ï–¢ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ web (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –ü–ú)
@Riverpod(keepAlive: true)
class Fcm extends _$Fcm {
  FirebaseMessaging get _firebaseMessaging => FirebaseMessaging.instance;

  InAppLogger get _logger => InAppLogger.instance;

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  late final StreamSubscription<String> _onTokenRefresh;

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π from a background state
  late final StreamSubscription<RemoteMessage> _onMessageOpenedApp;

  /// –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  late final StreamSubscription<RemoteMessage> _onMessage;

  final _name = 'FcmProvider';

  // RepoBase get _repo => ref.read(repoProvider);

  /// –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ common topic
  bool commonTopicSubscriptionActive = true;

  /// –ü—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä.
  ///
  /// –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
  bool notInitYet = true;

  @override
  String? build() {
    ref.listen(pushNotificationsProvider, (previous, next) {
      if (next & notInitYet) {
        _initMessaging();
      }
      return;
    });

    final ok = ref.read(pushNotificationsProvider);
    if (notInitYet && ok) {
      _initMessaging();
    }

    // –≠—Ç–æ—Ç null –Ω–∞—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±–µ—Å–ø–æ–∫–æ–∏—Ç—å, —Ç–∫ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –î–û —Ç–æ–≥–æ –∫–∞–∫
    // –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç initMessaging
    return null;
  }

  Future<void> _initMessaging() async {
    notInitYet = false;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    final authorizationStatus =
        (await _firebaseMessaging.requestPermission()).authorizationStatus;
    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    final noPermission = ![
      AuthorizationStatus.authorized,
      AuthorizationStatus.provisional,
    ].contains(authorizationStatus);
    if (noPermission) {
      _logger.logError(
        _name,
        '‚ùåÔ∏èNO Permission for push notifications. CloudMessaging is disabled',
      );
    } else {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
        final token = await _firebaseMessaging.getToken();

        _handleNewToken(token);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞
        _onTokenRefresh =
            _firebaseMessaging.onTokenRefresh.listen(_handleNewToken);
        _onTokenRefresh.onError(_handleMessagingError);
        ref.onDispose(_onTokenRefresh.cancel);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        _onMessage = FirebaseMessaging.onMessage.listen(_handleMessage);
        _onMessage.onError(_handleMessagingError);
        ref.onDispose(_onMessage.cancel);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π initialMessage - —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ–º
        // –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è from a terminated state
        // Once consumed, the RemoteMessage will be removed
        final initialMessage = await _firebaseMessaging.getInitialMessage();
        if (initialMessage != null) _handleInitialMessage(initialMessage);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–∏—Ö–æ–¥—è—â–∏—Ö, –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ
        _onMessageOpenedApp =
            FirebaseMessaging.onMessageOpenedApp.listen(_handleInitialMessage);
        _onMessageOpenedApp.onError(_handleMessagingError);
        ref.onDispose(_onMessageOpenedApp.cancel);

        if (token != null) {
          // _logger.addToLog(_name, '‚úÖ Init: CloudMessaging is enabled');
          await _subscribeTopics();
        } else {
          // _logger.addToLog(
          //     _name,
          //     '‚ùåÔ∏èNO valid token for push notifications. '
          //     'CloudMessaging is disabled');
        }
      } catch (e) {
        _handleMessagingError(e);
        // _logger.addToLog(_name, '‚ùåÔ∏è CloudMessaging is disabled');
      }
    }
  }

  void _handleMessagingError(Object error) {
    // showError(
    //     ExtendedErrors.simple(error.toString()),
    //     prefixForLog: '_firebaseMessaging.onError',
    //   );
  }

  void _handleMessage(RemoteMessage msg) {
    _logger.logWarning(
      'CloudMessagingController] [‚ùïNew Message‚ùï',
      msg.asString(),
    );

    ref
      ..invalidate(pushMessagesControllerProvider)
      ..invalidate(transactionsServiceProvider)
      ..invalidate(tronEnergyPipeServiceProvider)
      ..read(accountServiceProvider.notifier).getAccount();

    // msg.toDomain().then((v) {
    //   v.fold(
    //     (l) => showError(l, prefixForLog: '$_name._handleMessage'),
    //     // –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç –±—ç–∫–∞
    //     (r) => ref.invalidate(pushMessagesControllerProvider),
    //   );
    // });
  }

  void _handleInitialMessage(RemoteMessage msg) {
    // msg.toDomain().then((v) {
    //   v.fold(
    //     (l) => showError(l, prefixForLog: '$_name._handleInitnialMessage'),
    //     (r) {
    //       _repo.local.saveLastNotificationID(msgId: r.data.uuid);
    //       ref.invalidate(pushMessagesControllerProvider);
    //     },
    //   );
    // });
  }

  void _handleNewToken(String? newToken) {
    if (state != newToken) {
      // _logger.logInfoMessage(_name, 'GotToken: $newToken');
      state = newToken;
    }
    if (newToken == null) {
      _logger.logError(
          _name,
          '‚ùåÔ∏èNO valid token for push notifications. '
          'CloudMessaging is disabled');
    } else {
      ref.read(repoProvider).notifications.storeToken(newToken);
    }
  }

  Future<void> _subscribeTopics() async {
    // final topics =
    //     SubscribeTopic.values.where((e) => e != SubscribeTopic.error)
    //     .toList();
    // final res = await _repo.places
    //     .subscribeTopics(topicIds: topics.map((e) => e.id).toList());
    // res.fold(
    //   (l) => showError(l, prefixForLog: '_subscribeTopics',
    //   showToast: false),
    //   (r) => InAppLogger.instance.addToLog(
    //     _name,
    //     '_subscribeTopics: ${topics.map((e) => e.name).toList().join(',')}
    //     üÜó',
    //   ),
    // );
  }
}
